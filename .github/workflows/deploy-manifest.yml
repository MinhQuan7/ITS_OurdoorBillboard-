name: Deploy Logo Manifest to GitHub Pages

on:
  push:
    branches: [ main ]
    paths:
      - 'logos/**'
      - 'manifest.json'
      - '.github/workflows/deploy-manifest.yml'
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild manifest'
        required: false
        default: 'false'

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm init -y
        npm install sharp mime crypto
        
    - name: Generate manifest and optimize logos
      run: |
        node << 'EOF'
        const fs = require('fs');
        const path = require('path');
        const crypto = require('crypto');
        const sharp = require('sharp');
        const mime = require('mime-types');

        async function generateManifest() {
          console.log('Generating logo manifest...');
          
          const logosDir = './logos';
          const outputDir = './dist';
          
          // Create output directory
          if (!fs.existsSync(outputDir)) {
            fs.mkdirSync(outputDir, { recursive: true });
          }
          
          // Copy logos directory to dist
          if (fs.existsSync(logosDir)) {
            fs.cpSync(logosDir, path.join(outputDir, 'logos'), { recursive: true });
          }
          
          const logos = [];
          
          if (fs.existsSync(logosDir)) {
            const files = fs.readdirSync(logosDir);
            
            for (const file of files) {
              const filePath = path.join(logosDir, file);
              const stat = fs.statSync(filePath);
              
              if (stat.isFile() && /\.(png|jpg|jpeg|gif|svg)$/i.test(file)) {
                const fileContent = fs.readFileSync(filePath);
                const checksum = crypto.createHash('md5').update(fileContent).digest('hex');
                const mimeType = mime.lookup(filePath) || 'application/octet-stream';
                
                // Generate unique ID from filename
                const id = file.toLowerCase().replace(/[^a-z0-9]/g, '-').replace(/-+/g, '-');
                
                const logoItem = {
                  id: id,
                  name: file.replace(/\.[^/.]+$/, ""), // Remove extension
                  url: `https://mquan-eoh.github.io/billboard-logos-cdn/logos/${file}`,
                  filename: file,
                  size: stat.size,
                  type: mimeType,
                  checksum: checksum,
                  priority: logos.length + 1,
                  active: true,
                  uploadedAt: new Date().toISOString()
                };
                
                logos.push(logoItem);
                
                console.log(`Processed logo: ${file} (${stat.size} bytes, checksum: ${checksum.substring(0, 8)}...)`);
              }
            }
          }
          
          const manifest = {
            version: `1.0.${Date.now()}`,
            lastUpdated: new Date().toISOString(),
            logos: logos,
            settings: {
              logoMode: "loop",
              logoLoopDuration: 30,
              schedules: []
            },
            metadata: {
              author: "GitHub Actions",
              description: "Auto-generated manifest for ITS Billboard logos",
              apiVersion: "v1",
              buildTime: new Date().toISOString(),
              logoCount: logos.length,
              totalSize: logos.reduce((sum, logo) => sum + logo.size, 0)
            }
          };
          
          // Write manifest to dist directory
          fs.writeFileSync(
            path.join(outputDir, 'manifest.json'), 
            JSON.stringify(manifest, null, 2)
          );
          
          console.log(`Manifest generated successfully:`);
          console.log(`- Version: ${manifest.version}`);
          console.log(`- Logo count: ${logos.length}`);
          console.log(`- Total size: ${(manifest.metadata.totalSize / 1024).toFixed(1)}KB`);
          
          // Generate index.html for debugging
          const indexHtml = `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ITS Billboard Logos CDN</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        .logo-grid { display: grid; grid-template-columns: repeat(auto-fill, minmax(200px, 1fr)); gap: 20px; margin-top: 20px; }
        .logo-item { border: 1px solid #ddd; padding: 10px; border-radius: 8px; }
        .logo-item img { max-width: 100%; height: auto; }
        .logo-info { margin-top: 10px; font-size: 12px; color: #666; }
        .manifest-info { background: #f5f5f5; padding: 15px; border-radius: 8px; margin-bottom: 20px; }
    </style>
</head>
<body>
    <h1>ITS Billboard Logos CDN</h1>
    
    <div class="manifest-info">
        <h3>Manifest Information</h3>
        <p><strong>Version:</strong> ${manifest.version}</p>
        <p><strong>Last Updated:</strong> ${new Date(manifest.lastUpdated).toLocaleString()}</p>
        <p><strong>Logo Count:</strong> ${manifest.metadata.logoCount}</p>
        <p><strong>Total Size:</strong> ${(manifest.metadata.totalSize / 1024).toFixed(1)}KB</p>
        <p><strong>API Endpoint:</strong> <a href="./manifest.json">manifest.json</a></p>
    </div>
    
    <h3>Available Logos</h3>
    <div class="logo-grid">
        ${logos.map(logo => `
        <div class="logo-item">
            <img src="./logos/${logo.filename}" alt="${logo.name}" onerror="this.style.display='none'">
            <div class="logo-info">
                <strong>${logo.name}</strong><br>
                ID: ${logo.id}<br>
                Size: ${(logo.size / 1024).toFixed(1)}KB<br>
                Type: ${logo.type}<br>
                Checksum: ${logo.checksum.substring(0, 8)}...
            </div>
        </div>
        `).join('')}
    </div>
    
    <script>
        // Auto-refresh every 30 seconds to check for updates
        setTimeout(() => location.reload(), 30000);
    </script>
</body>
</html>`;
          
          fs.writeFileSync(path.join(outputDir, 'index.html'), indexHtml);
          console.log('Generated index.html for debugging');
        }

        generateManifest().catch(console.error);
        EOF
        
    - name: Setup Pages
      uses: actions/configure-pages@v4
      
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: './dist'
        
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
      
    - name: Verify deployment
      run: |
        echo "Deployment completed successfully!"
        echo "CDN URL: https://mquan-eoh.github.io/billboard-logos-cdn/"
        echo "Manifest API: https://mquan-eoh.github.io/billboard-logos-cdn/manifest.json"
        
        # Test the deployed manifest
        sleep 10
        curl -f "https://mquan-eoh.github.io/billboard-logos-cdn/manifest.json" > /dev/null && echo "✅ Manifest API is accessible" || echo "❌ Manifest API is not accessible"